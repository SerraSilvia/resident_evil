<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Tormenta Cinem√°tica</title>
  <style>
    body, html {
      margin: 0;
      padding: 0;
      height: 100%;
      overflow: hidden;
      background: #000; /* Fondo oscuro */
    }

    canvas {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      pointer-events: none; /* no bloquea clicks */
    }

    .content {
      position: relative;
      z-index: 1;
      color: white;
      text-align: center;
      top: 40%;
      font-size: 2rem;
      text-shadow: 0 0 10px rgba(0,0,0,0.8);
    }
  </style>
</head>
<body>
  <canvas id="snow"></canvas>

  <div class="content">
    <h1>üå®Ô∏è Tormenta de nieve cinem√°tica</h1>
  </div>

  <script>
    const canvas = document.getElementById("snow");
    const ctx = canvas.getContext("2d");

    // Ajustar tama√±o
    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;

    let particles = [];
    const numParticles = 400; // m√°s part√≠culas para m√°s densidad

    // Generar part√≠culas
    for (let i = 0; i < numParticles; i++) {
      particles.push({
        x: Math.random() * canvas.width,
        y: Math.random() * canvas.height,
        radius: Math.random() * 3 + 1,
        speedX: Math.random() * 2 + 0.5,
        speedY: Math.random() * 1 + 0.5,
        opacity: Math.random() * 0.5 + 0.3,
        blur: Math.floor(Math.random() * 6), // desenfoque para efecto de profundidad
        layer: Math.random() * 3 // capas de profundidad
      });
    }

    // Viento din√°mico
    let wind = 0;

    function draw() {
      ctx.clearRect(0, 0, canvas.width, canvas.height);

      for (let i = 0; i < particles.length; i++) {
        let p = particles[i];

        // Ajustar opacidad y blur
        ctx.fillStyle = `rgba(255, 255, 255, ${p.opacity})`;
        ctx.shadowBlur = p.blur;
        ctx.shadowColor = "white";

        ctx.beginPath();
        ctx.arc(p.x, p.y, p.radius, 0, Math.PI * 2);
        ctx.fill();
      }
      update();
    }

    function update() {
      // viento oscilante con seno/coseno
      wind = Math.sin(Date.now() / 2000) * 2;

      for (let i = 0; i < particles.length; i++) {
        let p = particles[i];
        p.x -= p.speedX + wind * (p.layer * 0.3); // viento m√°s fuerte en planos cercanos
        p.y += p.speedY + p.layer * 0.3; // los de primer plano caen m√°s r√°pido

        // reciclar part√≠culas
        if (p.x < -10 || p.y > canvas.height + 10) {
          p.x = canvas.width + Math.random() * 50;
          p.y = Math.random() * canvas.height * 0.2;
        }
      }
    }

    function loop() {
      draw();
      requestAnimationFrame(loop);
    }

    loop();

    // Redimensionar
    window.addEventListener("resize", () => {
      canvas.width = window.innerWidth;
      canvas.height = window.innerHeight;
    });
  </script>
</body>
</html>
